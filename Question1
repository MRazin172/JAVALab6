import java.util.Scanner;
import java.util.concurrent.*;

class Coin implements Callable<Integer> {
    private final int[] coins;
    private final int sum;
    private final int start;
    private final int end;

    public Coin(int[] coins, int sum, int start, int end) {
        this.coins = coins;
        this.sum = sum;
        this.start = start;
        this.end = end;
    }
    
    public Integer call() {
        int[] dp = new int[sum + 1];
        dp[0] = 1;

        for (int i = start; i < end; i++) {
            for (int j = coins[i]; j <= sum; j++) {
                dp[j] += dp[j - coins[i]];
            }
        }

        return dp[sum];
    }
}

public class Main {
    public static int findCoinCombinations(int[] coins, int sum, int numThreads) throws InterruptedException, ExecutionException {
        ExecutorService executor = Executors.newFixedThreadPool(numThreads);
        int partitions = coins.length / numThreads;
        int remaining = coins.length % numThreads;

        int start = 0;
        int end = partitions;

        Future<Integer>[] futures = new Future[numThreads];

        for (int i = 0; i < numThreads; i++) {
            if (i == numThreads - 1) {
                end += remaining;
            }
            Coin task = new Coin(coins, sum, start, end);
            futures[i] = executor.submit(task);
            start = end;
            end += partitions;
        }

        int totalWays = 0;
        for (Future<Integer> future : futures) {
            totalWays += future.get();
        }

        executor.shutdown();
        return totalWays;
    }

    public static void main(String[] args) {
        Scanner s = new Scanner(System.in);

        System.out.print("Enter the size of the array: ");
        int N = s.nextInt();

        int[] coins = new int[N];
        System.out.println("Enter array elements:");
        for (int i = 0; i < N; i++) {
            coins[i] = s.nextInt();
        }

        System.out.print("Enter sum: ");
        int sum = s.nextInt();

        System.out.print("Enter the number of threads: ");
        int numThreads = s.nextInt();

        try {
            int totalCombinations = findCoinCombinations(coins, sum, numThreads);
            System.out.println("Total combinations: " + totalCombinations);
        } catch (InterruptedException | ExecutionException e) {
            e.printStackTrace();
        } finally {
            s.close();
        }
    }
}
